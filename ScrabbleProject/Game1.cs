using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;

namespace ScrabbleProject;

public class Game1 : Game
{
    private GraphicsDeviceManager _graphics;
    private SpriteBatch _spriteBatch;

    private Vector2 windowSize = new Vector2(960, 720);
    private List<GameObject> gameObjects = new List<GameObject>();
    private bool loaded = false;
    public ScrabbleGame scrabble;
    public List<SpriteFont> fonts = new List<SpriteFont>();
    //data structure to hold data for rectangles generated by DrawLine and DrawRect
    private struct GameRectangle
    {
        public Vector2 size;
        public Texture2D texture;
        public GameRectangle(SpriteBatch _spriteBatch, Vector2 size)
        {
            this.size = new Vector2((int)size.X, (int)size.Y);
            this.texture = new Texture2D(_spriteBatch.GraphicsDevice, (int)size.X, (int)size.Y);
            Color[] colors = new Color[(int)(size.X * size.Y)];
            for(int i = 0; i < colors.Length; i++)
            {
                colors[i] = Color.White;
            }
            texture.SetData(colors);
        }
    }
    //list of rectangle generated by DrawLine and DrawRect
    private List<GameRectangle> rectanglePool = new List<GameRectangle>();
    private Vector2 mousePos = new Vector2(0, 0);
    private bool[] mousePressed = {false, false};
    private bool[] mouseHeld = {false, false};
    private bool[] mouseReleased = {false, false};
    public List<string> players = new List<string>();
    

    public Game1()
    {
        _graphics = new GraphicsDeviceManager(this);
        Content.RootDirectory = "Content";
        IsMouseVisible = true;
    }

    //add new GameObject to list of all GameObjects
    public void AddGameObject(GameObject gameObject)
    {
        gameObjects.Add(gameObject);
        gameObject.SetGameReference(this);
        if(loaded && !gameObject.loaded)
            gameObject.LoadContent(Content);
    }
    //remove GameObject from list of GameObjects
    public void RemoveGameObject(GameObject gameObject) { gameObjects.Remove(gameObject); }
    public void RemoveGameObjectAt(int ind) { gameObjects.RemoveAt(ind); }
    public List<GameObject> GetGameObjects() { return gameObjects; }

    public Vector2 GetWindowSize() { return windowSize; }

    protected override void Initialize()
    {
        //if you have not used graphics yet, then using GraphicsDevice will crash the game. Calling ApplyChanges() prevents this.
        if(GraphicsDevice == null)
            _graphics.ApplyChanges();

        //set window resolution
        _graphics.PreferredBackBufferWidth = (int)windowSize.X;
        _graphics.PreferredBackBufferHeight = (int)windowSize.Y;
        _graphics.ApplyChanges();

        //read PlayerConfig file and assign players to be either cpu, player, or none
        StreamReader sr = new StreamReader("../../../Content/PlayerConfig.txt");
        for(string line = sr.ReadLine(); line != null && players.Count() < 4; line = sr.ReadLine())
        {
            Console.WriteLine(line);
            string fl = line.ToLower();
            if(fl == "player" || fl == "cpu")
                players.Add(fl);
        }
        sr.Close();

        //create our scrabble game
        scrabble = new ScrabbleGame(this);
        scrabble.Initialize();

        base.Initialize();
    }

    //load game assets like sprites and fonts
    protected override void LoadContent()
    {
        _spriteBatch = new SpriteBatch(GraphicsDevice);

        //load all fonts in Content/Fonts folder
        string contentPath = "../../../Content/";
        string fontsPath = contentPath + "Fonts/";
        string[] fontPaths = Directory.GetFiles(fontsPath);
        for(int i = 0 ; i < fontPaths.Count(); i++)
        {
            string fontPath = fontPaths[i].Substring(contentPath.Length);
            fontPath = fontPath.Substring(0, fontPath.IndexOf('.'));
            Console.WriteLine("Loading Font: " + fontPath);
            fonts.Add(Content.Load<SpriteFont>(fontPath));
        }

        //call LoadContent for each GameObject
        scrabble.LoadContent(Content);
        
        for(int i = 0; i < gameObjects.Count; i++)
        {
            gameObjects[i].LoadContent(Content);
        }

        //set loaded to true so we know the initial load has been completed
        loaded = true;
    }

    //tick
    protected override void Update(GameTime gameTime)
    {
        if (GamePad.GetState(PlayerIndex.One).Buttons.Back == ButtonState.Pressed || Keyboard.GetState().IsKeyDown(Keys.Escape))
            Exit();

        //update mouse position variable
        Point mousePoint = Mouse.GetState().Position;
        mousePos = new Vector2(mousePoint.X, mousePoint.Y);

        //update left mouse button status variables
        bool[] mouseDown = {Mouse.GetState().LeftButton == ButtonState.Pressed, Mouse.GetState().RightButton == ButtonState.Pressed};
        for(int i = 0; i < 2; i++)
        {
            mousePressed[i] = mouseDown[i] && !mouseHeld[i];
            mouseReleased[i] = !mouseDown[i] && mouseHeld[i];
            mouseHeld[i] = mouseDown[i];
        }

        //call update for ScrabbleGame and each GameObject
        scrabble.Update(gameTime);

        for(int i = 0; i < gameObjects.Count; i++)
        {
            gameObjects[i].Update(gameTime);
        }


        base.Update(gameTime);
    }

    public Vector2 GetMousePos() { return mousePos; }
    public bool[] GetMousePressed() { return mousePressed; }
    public bool[] GetMouseHeld() { return mouseHeld; }
    public bool[] GetMouseReleased() { return mouseReleased; }

    //draw graphics
    protected override void Draw(GameTime gameTime)
    {
        GraphicsDevice.Clear(new Color(142, 107, 77));

        _spriteBatch.Begin();
        

        //call Draw for ScrabbleGame and each GameObject
        scrabble.Draw(gameTime, _spriteBatch);

        for(int i = 0; i < gameObjects.Count; i++)
        {
            gameObjects[i].Draw(gameTime, _spriteBatch);
        }

        scrabble.DrawOnTop(gameTime, _spriteBatch);


        _spriteBatch.End();

        base.Draw(gameTime);
    }

    //generate rectangle texture to draw from point p1 to point p2.
    //if a rectangle texture of the same size has already been generated before, use that instead of making a new one.
    public void DrawLine(Vector2 p1, Vector2 p2, int thickness = 1, Color color = default)
    {
        if(color == default)
            color = Color.Black;

        int distance = (int)(Vector2.Distance(p1, p2) + 0.5) + thickness;
        Texture2D foundTex = null;
        bool perpendicular = false;
        for(int i = 0; i < rectanglePool.Count; i++)
        {
            int wid = (int)rectanglePool[i].size.X;
            int hei = (int)rectanglePool[i].size.Y;
            if(wid == distance && hei == thickness)
                foundTex = rectanglePool[i].texture;
            else if(hei == distance && wid == thickness)
            {
                foundTex = rectanglePool[i].texture;
                perpendicular = true;
            }
        }
        if(foundTex == null)
        {
            GameRectangle gr = new GameRectangle(_spriteBatch, new Vector2(distance, thickness));
            rectanglePool.Add(gr);
            foundTex = gr.texture;
        }
        
        Vector2 origin = new Vector2((float)thickness / 2, (float)thickness / 2);
        if(perpendicular)
            origin = new Vector2(thickness / 2, 0);
        double rotation = Math.Atan2(p2.Y - p1.Y, p2.X - p1.X);
        if(perpendicular)
            rotation += 90 * Math.PI / 180;

        _spriteBatch.Draw(foundTex, p1, null, color, (float)rotation, origin, 1.0f, SpriteEffects.None, 1.0f);
    }
    //draw rectangle using DrawLine function
    public void DrawRect(Vector2 pos, Vector2 size, bool centered = false, int thickness = 1, bool filled = true, Color color = default)
    {
        Vector2 centerPos;
        if(centered)
            centerPos = pos;
        else
            centerPos = pos + new Vector2(size.X / 2, size.Y / 2);
        Vector2 topLeft = centerPos - size / 2;

        if(filled)
        {
            //works like this because thickness is added to both sides of the line
            if(size.X >= size.Y) //if width is larger draw from left to right
            {
                int totalThickness = (int)size.Y + thickness;
                DrawLine(new Vector2(centerPos.X - (size.X - size.Y) / 2, centerPos.Y), 
                    new Vector2(centerPos.X + (size.X - size.Y) / 2, centerPos.Y), totalThickness, color);
            }
            else //if height is longer draw from top to bottom
            {
                int totalThickness = (int)size.X + thickness;
                DrawLine(new Vector2(centerPos.X, centerPos.Y - (size.Y - totalThickness) / 2),
                    new Vector2(centerPos.X, centerPos.Y + (size.Y - totalThickness) / 2), totalThickness, color);
            }
        }
        else
        {
            DrawLine(topLeft, new Vector2(topLeft.X + size.X, topLeft.Y), thickness, color);
            DrawLine(topLeft, new Vector2(topLeft.X, topLeft.Y + size.Y), thickness, color);
            DrawLine(topLeft + size, new Vector2(topLeft.X + size.X, topLeft.Y), thickness, color);
            DrawLine(topLeft + size, new Vector2(topLeft.X, topLeft.Y + size.Y), thickness, color);
        }
    }
    //debug to make sure rectangle pooling system is working correctly
    public void PrintRectanglePoolSize()
    {
        Console.WriteLine("Rectangle Pool Size: " + rectanglePool.Count.ToString());
    }

    //use MeasureString and DrawString to draw a centered string
    public void DrawStringCentered(SpriteFont font, string str, Vector2 pos = default, Color color = default)
    {
        if(pos == default)
            pos = new Vector2(windowSize.X / 2, windowSize.Y / 2);
        if(color == default)
            color = Color.Black;

        Vector2 strSize = font.MeasureString(str);
        _spriteBatch.DrawString(font, str, pos - new Vector2(strSize.X / 2, strSize.Y / 2), color);
    }
}
